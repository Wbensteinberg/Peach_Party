1. 
My Banksquare doActivity() function is called by ActivatingObject's doSomething() function which is called during every tick. In doActivity(), the Banksquare first checks if peach or Yoshi have landed on it by comparing their x and y coordinates and checking that the player is in the waiting to roll state. This way, we know the player has finished their roll and they have landed on a bank square. If this is the case, the bank square calls peach or Yoshi's setNew function and sets the bool to OLD to mark that they are no longer a new player. Then, it call's peach or Yoshi's addCoins() function and calls getWorld()->getBankBalance(). This simply adds the value of the bank, in student world, to the private coin data member of peach and Yoshi which in turn, changes the display string which just displays their coin count. Next, the bank square calls getWorld()->addtoBankBalance() and puts in -1 times the current bank balance. This essentially subtracts the current balance from the current balance, therefore setting the bank balance to zero.

The Banksquare doActivity() function also checks if peach or Yoshi have moved over the banksquare by checking if the bank square's X and Y coords (using getX() & getY()) are the same as peach or Yoshi's AND making sure the player is in the walking state. This ensures that peach and Yoshi are moving while at the same position as the bank. If this is true, and peach or Yoshi have less than 5 coins, 
Banksquare calls peach or Yoshi's addCoins() function and puts in -1*peachoryoshi->getCoins which simply sets their coins to zero (subtracting current coins from current coins). Then getworld()-addToBankBalance() is called with a temp parameter holding the initial coins of the player. This just adds the initial coins of the player to the total bank balance. If, peach or Yoshi have more than 5 coins,Banksquare calls peach or Yoshi's addCoins() function and puts in m_coins_change as a parameter which is a private data member of the bank square class that holds the value of how much to change the player's coins when they pass over it. This changes the players coins by that amount and then the bank square calls getWorld()->addToBankBalance() function and puts in -1*m_coins_change as a parameter which simply add's that amount to the current bank balance which is just a private data member of the student world class. The display string is wired to display the current bank balance every tick so the screen shows the changed bank balance as well as the changed player balance.

2.
I implemented all functionality

3. 
I assumed that the conditions for a player hitting a fork, are simply that there are more than 2 valid squares surrounding the player at the player's current position (including the one behind the player, although the player isn't allowed to move onto it). This means that if the player is going right and can go up or down but not forward, they have to choose the direction to go because it counts as a fork.